"""
Componentes de interface do usu√°rio.

Este m√≥dulo implementa os componentes de interface do usu√°rio
usando Streamlit. O m√≥dulo √© respons√°vel por:

1. Renderizar o dashboard principal
2. Renderizar o formul√°rio de entrada
3. Renderizar os resultados
4. Aplicar temas e estilos

Estrutura do m√≥dulo:
1. Classes de Componentes:
   - ThemeComponent: Gerencia temas e configura√ß√µes
   - InputFormComponent: Gerencia formul√°rio de entrada
   - DashboardComponent: Gerencia exibi√ß√£o de resultados
2. Fun√ß√µes Auxiliares:
   - formatar_moeda: Formata√ß√£o de valores monet√°rios
   - formatar_percentual: Formata√ß√£o de percentuais
   - render_indicator_selector: Sele√ß√£o de indicadores
   - render_results: Exibi√ß√£o de resultados detalhados

IMPORTANTE:
- Interface intuitiva e amig√°vel
- Feedback visual claro
- Consist√™ncia no design
- Responsividade
- Documenta√ß√£o clara para facilitar manuten√ß√£o
"""

import streamlit as st
import pandas as pd
from datetime import datetime
from typing import Dict, List, Optional, TypedDict, Union, Tuple
import plotly.express as px
import plotly.graph_objects as go
import locale
from dateutil.relativedelta import relativedelta
import os

from src.core.types import (
    SimulationParameters,
    SimulationResults,
    HistoricalSimulation,
    APIData,
    CalculationInput,
    CalculationOutput
)

from src.core.interfaces import IUIComponent
from src.core.exceptions import InvalidParameterError, ThemeError

from src.utils.logging import get_logger
from src.utils.export_utils import export_to_csv, export_to_excel, export_to_json

# Configura√ß√£o inicial
logger = get_logger(__name__)

# Configura√ß√£o do locale para formata√ß√£o de valores
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252')
    except:
        st.warning("N√£o foi poss√≠vel configurar o locale para portugu√™s do Brasil. Os valores monet√°rios podem n√£o ser exibidos corretamente.")

class ThemeComponent(IUIComponent):
    """
    Componente para gerenciamento de temas e configura√ß√µes.
    
    Responsabilidades:
    1. Sele√ß√£o e aplica√ß√£o de temas
    2. Configura√ß√µes de visualiza√ß√£o
    3. Op√ß√µes de exporta√ß√£o
    4. Configura√ß√µes de alertas
    
    TODO:
    - Adicionar mais op√ß√µes de temas
    - Implementar persist√™ncia de configura√ß√µes
    - Adicionar suporte a temas personalizados
    """
    
    def __init__(self):
        """Inicializa o componente de tema."""
        self.css_file = os.path.join(os.path.dirname(__file__), 'styles.css')
        if not os.path.exists(self.css_file):
            raise ThemeError("Arquivo de estilos n√£o encontrado")
    
    def render(self, data: Optional[Dict] = None) -> Tuple[str, bool, bool, bool, str]:
        """
        Renderiza o seletor de tema e aplica o tema selecionado.
        
        Args:
            data: Dados opcionais para configura√ß√£o inicial
            
        Returns:
            Tuple contendo:
            - theme: Nome do tema selecionado
            - mostrar_tendencias: Flag para mostrar tend√™ncias
            - mostrar_estatisticas: Flag para mostrar estat√≠sticas
            - mostrar_alertas: Flag para mostrar alertas
            - formato_exportacao: Formato de exporta√ß√£o selecionado
            
        Raises:
            ThemeError: Se houver erro ao aplicar o tema
        """
        try:
            # Carrega os estilos CSS
            with open(self.css_file, 'r') as f:
                st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
            
            # Obt√©m as configura√ß√µes do tema
            theme_config = self._render_theme_selector()
            
            # Aplica o tema
            self._apply_theme(theme_config[0])
            
            return theme_config
            
        except Exception as e:
            logger.error(f"Erro ao renderizar tema: {str(e)}")
            raise ThemeError(f"Erro ao renderizar tema: {str(e)}")
    
    def _render_theme_selector(self) -> Tuple[str, bool, bool, bool, str]:
        """
        Renderiza o seletor de tema e retorna as configura√ß√µes.
        
        Returns:
            Tuple contendo as configura√ß√µes do tema
            
        Raises:
            ThemeError: Se houver erro ao renderizar o seletor
        """
        try:
            with st.sidebar:
                st.title("‚öôÔ∏è Configura√ß√µes")
                
                # Seletor de tema
                theme = st.selectbox(
                    "üé® Tema",
                    ["Claro", "Escuro"],
                    index=1,  # Escuro como padr√£o
                    help="Selecione o tema da interface"
                )
                
                # Configura√ß√µes de visualiza√ß√£o
                st.divider()
                st.subheader("üìä Visualiza√ß√£o")
                mostrar_tendencias = st.checkbox(
                    "Mostrar tend√™ncias",
                    value=True,
                    help="Exibe as tend√™ncias dos indicadores no gr√°fico"
                )
                
                mostrar_estatisticas = st.checkbox(
                    "Mostrar estat√≠sticas detalhadas",
                    value=True,
                    help="Exibe estat√≠sticas adicionais dos resultados"
                )
                
                # Configura√ß√µes de alertas
                st.divider()
                st.subheader("‚öôÔ∏è Op√ß√µes")
                mostrar_alertas = st.checkbox(
                    "Mostrar alertas",
                    value=True,
                    help="Exibe alertas sobre poss√≠veis problemas nos c√°lculos"
                )
                
                # Configura√ß√µes de exporta√ß√£o
                st.divider()
                st.subheader("üíæ Exporta√ß√£o")
                formato_exportacao = st.selectbox(
                    "Formato de exporta√ß√£o",
                    ["Excel", "PDF", "CSV"],
                    index=0,
                    help="Selecione o formato para exportar os resultados"
                )
            
            return theme, mostrar_tendencias, mostrar_estatisticas, mostrar_alertas, formato_exportacao
            
        except Exception as e:
            logger.error(f"Erro ao renderizar seletor de tema: {str(e)}")
            raise ThemeError(f"Erro ao renderizar seletor de tema: {str(e)}")
    
    def _apply_theme(self, theme: str) -> None:
        """
        Aplica o tema selecionado.
        
        Args:
            theme: Nome do tema a ser aplicado
            
        Raises:
            ThemeError: Se houver erro ao aplicar o tema
        """
        try:
            # Define o atributo data-theme no body
            st.markdown(
                f'<body data-theme="{theme.lower()}">',
                unsafe_allow_html=True
            )
            
        except Exception as e:
            logger.error(f"Erro ao aplicar tema: {str(e)}")
            raise ThemeError(f"Erro ao aplicar tema: {str(e)}")

class InputFormComponent(IUIComponent):
    """
    Componente para formul√°rio de entrada.
    
    Responsabilidades:
    1. Renderizar formul√°rio de entrada
    2. Validar dados de entrada
    3. Retornar par√¢metros validados
    4. Gerenciar sele√ß√£o de indicadores
    """
    
    def __init__(self):
        """Inicializa o componente de formul√°rio."""
        self.logger = get_logger(__name__)
    
    def render(self, data: Optional[Dict] = None) -> SimulationParameters:
        """
        Renderiza o formul√°rio de entrada.
        
        Args:
            data: Dados opcionais para preenchimento inicial
            
        Returns:
            SimulationParameters: Par√¢metros da simula√ß√£o
            
        Raises:
            InvalidParameterError: Se os par√¢metros forem inv√°lidos
        """
        try:
            return self._render_form(data)
        except Exception as e:
            self.logger.error(f"Erro ao renderizar formul√°rio: {str(e)}")
            st.error("Erro ao processar o formul√°rio. Por favor, verifique os dados.")
            return None
    
    def _render_form(self, data: Optional[Dict] = None) -> SimulationParameters:
        """
        Renderiza o formul√°rio e retorna os par√¢metros.
        
        Args:
            data: Dados opcionais para preenchimento inicial
            
        Returns:
            SimulationParameters: Par√¢metros da simula√ß√£o
            
        Raises:
            InvalidParameterError: Se os par√¢metros forem inv√°lidos
        """
        st.title("üí∞ Calculadora de Investimentos")
        
        with st.form("investment_form"):
            # Capital inicial
            initial_capital = st.number_input(
                "Capital Inicial (R$)",
                min_value=0.0,
                value=10000.0,
                step=1000.0,
                format="%.2f",
                help="Valor inicial a ser investido"
            )
            
            # Aporte mensal
            monthly_contribution = st.number_input(
                "Aporte Mensal (R$)",
                min_value=0.0,
                value=1000.0,
                step=100.0,
                format="%.2f",
                help="Valor a ser investido mensalmente"
            )
            
            # Retirada mensal
            monthly_withdrawal = st.number_input(
                "Retirada Mensal (R$)",
                min_value=0.0,
                value=0.0,
                step=100.0,
                format="%.2f",
                help="Valor a ser retirado mensalmente"
            )
            
            # Taxa de infla√ß√£o
            inflation_rate = st.number_input(
                "Taxa de Infla√ß√£o Anual (%)",
                min_value=0.0,
                value=4.5,
                step=0.1,
                format="%.2f",
                help="Taxa de infla√ß√£o anual esperada"
            ) / 100.0
            
            # Taxa livre de risco
            risk_free_rate = st.number_input(
                "Taxa Livre de Risco Anual (%)",
                min_value=0.0,
                value=6.5,
                step=0.1,
                format="%.2f",
                help="Taxa livre de risco anual (ex: Selic)"
            ) / 100.0
            
            # Datas
            col1, col2 = st.columns(2)
            with col1:
                start_date = st.date_input(
                    "Data Inicial",
                    value=datetime.now().date(),
                    help="Data de in√≠cio da simula√ß√£o"
                )
            with col2:
                end_date = st.date_input(
                    "Data Final",
                    value=(datetime.now() + relativedelta(years=5)).date(),
                    help="Data final da simula√ß√£o"
                )
            
            # Indicadores
            indicators = self._render_indicator_selector(data)
            
            # Bot√£o de submiss√£o
            submitted = st.form_submit_button("Calcular")
            
            if submitted:
                # Valida√ß√£o dos par√¢metros
                self._validate_parameters(
                    initial_capital,
                    monthly_contribution,
                    risk_free_rate,
                    (end_date - start_date).days // 30,
                    indicators
                )
                
                # Retorna os par√¢metros validados
                return SimulationParameters(
                    initial_capital=initial_capital,
                    monthly_contribution=monthly_contribution,
                    monthly_withdrawal=monthly_withdrawal,
                    inflation_rate=inflation_rate,
                    risk_free_rate=risk_free_rate,
                    start_date=datetime.combine(start_date, datetime.min.time()),
                    end_date=datetime.combine(end_date, datetime.min.time()),
                    indicators=indicators
                )
            
            return None
    
    def _render_indicator_selector(self, data: Optional[Dict] = None) -> List[str]:
        """
        Renderiza o seletor de indicadores usando multiselect com nome completo.
        
        Args:
            data: Dados opcionais para sele√ß√£o inicial
        
        Returns:
            List[str]: Lista de c√≥digos dos indicadores selecionados
        """
        st.subheader("üìä Indicadores para Compara√ß√£o")

        # Dicion√°rio de indicadores com nome completo
        indicadores = {
            "SELIC": "Sistema Especial de Liquida√ß√£o e de Cust√≥dia",
            "IPCA": "√çndice Nacional de Pre√ßos ao Consumidor Amplo",
            "CDI": "Certificado de Dep√≥sito Interbanc√°rio",
            "IGPM": "√çndice Geral de Pre√ßos do Mercado",
            "BVSP": "Ibovespa",
            "GSPC": "S&P 500",
            "BRL=X": "D√≥lar Comercial"            
        }
        # Op√ß√µes para o multiselect
        indicator_options = [f"{codigo} - {nome}" for codigo, nome in indicadores.items()]
        # Mapeamento reverso para pegar o c√≥digo a partir do label
        label_to_codigo = {f"{codigo} - {nome}": codigo for codigo, nome in indicadores.items()}

        # Sele√ß√£o via multiselect
        selected_labels = st.multiselect(
            "Selecione os indicadores para compara√ß√£o",
            options=indicator_options,
            default=[f"{codigo} - {nome}" for codigo, nome in indicadores.items() if codigo in (data or {}).get("indicators", [])],
            help="Escolha um ou mais indicadores para comparar"
        )
        # Retorna apenas os c√≥digos selecionados
        return [label_to_codigo[label] for label in selected_labels]
    
    def _validate_parameters(
        self,
        initial_capital: float,
        monthly_contribution: float,
        risk_free_rate: float,
        period_months: int,
        indicators: List[str]
    ) -> None:
        """
        Valida os par√¢metros de entrada.
        
        Args:
            initial_capital: Capital inicial
            monthly_contribution: Aporte mensal
            risk_free_rate: Taxa livre de risco
            period_months: Per√≠odo em meses
            indicators: Lista de indicadores
            
        Raises:
            InvalidParameterError: Se algum par√¢metro for inv√°lido
        """
        if initial_capital <= 0:
            raise InvalidParameterError(
                "capital_inicial",
                "O capital inicial deve ser maior que zero"
            )
        
        if monthly_contribution < 0:
            raise InvalidParameterError(
                "aporte_mensal",
                "O aporte mensal n√£o pode ser negativo"
            )
        
        if risk_free_rate < 0:
            raise InvalidParameterError(
                "taxa_juros",
                "A taxa de juros n√£o pode ser negativa"
            )
        
        if period_months < 1:
            raise InvalidParameterError(
                "periodo",
                "O per√≠odo deve ser de pelo menos 1 m√™s"
            )
        
        if not indicators:
            raise InvalidParameterError(
                "indicadores",
                "Selecione pelo menos um indicador para compara√ß√£o"
            )

class DashboardComponent(IUIComponent):
    """
    Componente para gerenciamento do dashboard.
    
    Responsabilidades:
    1. Renderiza√ß√£o do dashboard
    2. Exibi√ß√£o de m√©tricas
    3. Visualiza√ß√£o de gr√°ficos
    4. Exporta√ß√£o de resultados
    
    TODO:
    - Adicionar mais tipos de visualiza√ß√£o
    - Implementar filtros interativos
    - Adicionar suporte a m√∫ltiplos per√≠odos
    """
    
    def __init__(self):
        """Inicializa o componente de dashboard."""
        self.css_file = os.path.join(os.path.dirname(__file__), 'styles.css')
        if not os.path.exists(self.css_file):
            raise ThemeError("Arquivo de estilos n√£o encontrado")
    
    def render(self, data: Optional[Dict] = None) -> None:
        """
        Renderiza o dashboard com os resultados.
        
        Args:
            data: Dados para exibi√ß√£o no dashboard
            
        Raises:
            InvalidParameterError: Se houver erro na renderiza√ß√£o
        """
        try:
            # Carrega os estilos CSS
            with open(self.css_file, 'r') as f:
                st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
            
            # Renderiza o dashboard
            self._render_dashboard(data)
            
        except Exception as e:
            logger.error(f"Erro ao renderizar dashboard: {str(e)}")
            raise InvalidParameterError(f"Erro ao renderizar dashboard: {str(e)}")
    
    def _render_dashboard(self, data: Optional[Dict] = None) -> None:
        """
        Renderiza o dashboard com os resultados.
        
        Args:
            data: Dados para exibi√ß√£o no dashboard
            
        Raises:
            InvalidParameterError: Se houver erro na renderiza√ß√£o
        """
        try:
            if not data:
                st.warning("Nenhum dado dispon√≠vel para exibi√ß√£o")
                return
            
            # T√≠tulo do dashboard
            st.title("üìä Resultados da Simula√ß√£o")
            
            # M√©tricas principais
            self._render_metrics(data)
            
            # Gr√°ficos
            self._render_charts(data)
            
            # An√°lise de risco
            self._render_risk_analysis(data)
            
            # Op√ß√µes de exporta√ß√£o
            self._render_export_options(data)
            
        except Exception as e:
            logger.error(f"Erro ao renderizar dashboard: {str(e)}")
            raise InvalidParameterError(f"Erro ao renderizar dashboard: {str(e)}")
    
    def _render_metrics(self, data: Dict) -> None:
        """
        Renderiza as m√©tricas principais.
        
        Args:
            data: Dados para exibi√ß√£o das m√©tricas
            
        Raises:
            InvalidParameterError: Se houver erro na renderiza√ß√£o
        """
        try:
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "üí∞ Valor Final",
                    formatar_moeda(data.get('valor_final', 0)),
                    help="Valor total ao final do per√≠odo"
                )
            
            with col2:
                st.metric(
                    "üìà Retorno Total",
                    formatar_percentual(data.get('retorno_total', 0)),
                    help="Retorno total do investimento"
                )
            
            with col3:
                st.metric(
                    "üíµ Aporte Total",
                    formatar_moeda(data.get('aporte_total', 0)),
                    help="Total de aportes realizados"
                )
            
        except Exception as e:
            logger.error(f"Erro ao renderizar m√©tricas: {str(e)}")
            raise InvalidParameterError(f"Erro ao renderizar m√©tricas: {str(e)}")
    
    def _render_charts(self, data: Dict) -> None:
        """
        Renderiza os gr√°ficos.
        
        Args:
            data: Dados para exibi√ß√£o dos gr√°ficos
            
        Raises:
            InvalidParameterError: Se houver erro na renderiza√ß√£o
        """
        try:
            # Gr√°fico de evolu√ß√£o
            st.subheader("üìà Evolu√ß√£o do Investimento")
            fig = px.line(
                data.get('evolucao', pd.DataFrame()),
                x='data',
                y='valor',
                title='Evolu√ß√£o do Valor do Investimento',
                labels={'data': 'Data', 'valor': 'Valor (R$)'}
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Gr√°fico de composi√ß√£o
            st.subheader("üìä Composi√ß√£o do Investimento")
            fig = px.pie(
                data.get('composicao', pd.DataFrame()),
                values='valor',
                names='tipo',
                title='Composi√ß√£o do Investimento',
                hole=0.4
            )
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            logger.error(f"Erro ao renderizar gr√°ficos: {str(e)}")
            raise InvalidParameterError(f"Erro ao renderizar gr√°ficos: {str(e)}")
    
    def _render_risk_analysis(self, data: Dict) -> None:
        """
        Renderiza a an√°lise de risco.
        
        Args:
            data: Dados para exibi√ß√£o da an√°lise de risco
            
        Raises:
            InvalidParameterError: Se houver erro na renderiza√ß√£o
        """
        try:
            st.subheader("‚ö†Ô∏è An√°lise de Risco")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric(
                    "üìä Volatilidade",
                    formatar_percentual(data.get('volatilidade', 0)),
                    help="Volatilidade do investimento"
                )
            
            with col2:
                st.metric(
                    "üìà Sharpe Ratio",
                    f"{data.get('sharpe_ratio', 0):.2f}",
                    help="√çndice de Sharpe"
                )
            
            # Gr√°fico de distribui√ß√£o de retornos
            fig = px.histogram(
                data.get('retornos', pd.DataFrame()),
                x='retorno',
                title='Distribui√ß√£o de Retornos',
                labels={'retorno': 'Retorno (%)'}
            )
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            logger.error(f"Erro ao renderizar an√°lise de risco: {str(e)}")
            raise InvalidParameterError(f"Erro ao renderizar an√°lise de risco: {str(e)}")
    
    def _render_export_options(self, data: Dict) -> None:
        """
        Renderiza as op√ß√µes de exporta√ß√£o.
        
        Args:
            data: Dados para exporta√ß√£o
            
        Raises:
            InvalidParameterError: Se houver erro na renderiza√ß√£o
        """
        try:
            st.subheader("üíæ Exportar Resultados")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üìÑ Exportar para CSV"):
                    export_to_csv(data)
                    st.success("Dados exportados com sucesso!")
            
            with col2:
                if st.button("üìä Exportar para Excel"):
                    export_to_excel(data)
                    st.success("Dados exportados com sucesso!")
            
            with col3:
                if st.button("üìã Exportar para JSON"):
                    export_to_json(data)
                    st.success("Dados exportados com sucesso!")
            
        except Exception as e:
            logger.error(f"Erro ao renderizar op√ß√µes de exporta√ß√£o: {str(e)}")
            raise InvalidParameterError(f"Erro ao renderizar op√ß√µes de exporta√ß√£o: {str(e)}")

# Fun√ß√µes auxiliares
def formatar_moeda(valor):
    """Formata um valor num√©rico como moeda brasileira (R$)."""
    try:
        return locale.currency(valor, grouping=True, symbol=True)
    except:
        return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def formatar_percentual(valor):
    """Formata um valor num√©rico como percentual."""
    try:
        return f"{valor:.2f}%"
    except:
        return f"{valor}%"

def render_indicator_selector(indicadores_disponiveis):
    """Renderiza o seletor de indicadores e retorna os indicadores selecionados."""
    st.subheader("üìä Seletor de Indicadores")
    
    with st.expander("üîç Indicadores BCB", expanded=True):
        indicadores_bcb = st.multiselect(
            "üîç Selecione os indicadores do BCB",
            options=list(indicadores_disponiveis['bcb'].keys()),
            default=["CDI", "Selic"],
            help="Indicadores do Banco Central do Brasil"
        )
    
    with st.expander("üìä Indicadores YFinance", expanded=True):
        indicadores_yfinance = st.multiselect(
            "üìä Selecione os indicadores do YFinance",
            options=list(indicadores_disponiveis['yfinance'].keys()),
            default=["IBOVESPA", "S&P 500"],
            help="Indicadores do Yahoo Finance"
        )
    
    with st.expander("üìà Indicadores Personalizados", expanded=False):
        st.subheader("üìä Adicionar Indicador Personalizado")
        novo_indicador = st.text_input(
            "üìù Nome do Indicador",
            help="Nome para o indicador personalizado"
        )
        
        if novo_indicador:
            valor_inicial = st.number_input(
                "üí∞ Valor Inicial",
                min_value=0.0,
                value=100.0,
                step=0.1,
                format="%.2f",
                help="Valor inicial do indicador"
            )
            
            taxa_retorno = st.number_input(
                "üìà Taxa de Retorno Mensal",
                min_value=0.0,
                max_value=100.0,
                value=1.0,
                step=0.1,
                format="%.1f",
                help="Taxa de retorno mensal em porcentagem"
            )
            
            if st.button("‚ûï Adicionar Indicador"):
                indicadores_disponiveis['personalizado'][novo_indicador] = {
                    'valor_inicial': valor_inicial,
                    'taxa_retorno': taxa_retorno
                }
                st.success(f"Indicador '{novo_indicador}' adicionado com sucesso!")
    
    # Combinando os indicadores selecionados
    indicadores_selecionados = []
    for nome in indicadores_bcb:
        indicadores_selecionados.append((nome, 'bcb'))
    for nome in indicadores_yfinance:
        indicadores_selecionados.append((nome, 'yfinance'))
    
    # Bot√£o de c√°lculo com loading
    with st.spinner("Calculando..."):
        calcular = st.button(
            "üöÄ Calcular Rentabilidade",
            type="primary",
            help="Inicia o c√°lculo da rentabilidade"
        )
    
    return indicadores_selecionados, calcular

def render_results(df_resultado, dados_indicadores, indicadores_selecionados, mostrar_tendencias, mostrar_estatisticas):
    """Renderiza os resultados da simula√ß√£o."""
    st.subheader("üìä Resultados da Simula√ß√£o")
    
    # Exibindo o gr√°fico principal
    st.markdown("### üìà Evolu√ß√£o do Capital e Indicadores")
    
    # Criando figura com subplots
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 10), sharex=True)
    
    # Gr√°fico principal de evolu√ß√£o do capital
    ax1.plot(df_resultado.index, df_resultado['Saldo'], label='Capital', color='#2563eb', linewidth=2)
    
    # Adicionando indicadores selecionados
    for nome, tipo in indicadores_selecionados:
        if tipo == 'bcb':
            if nome in dados_indicadores:
                ax1.plot(
                    dados_indicadores[nome].index,
                    dados_indicadores[nome]['valor'],
                    label=nome,
                    linestyle='--',
                    alpha=0.7
                )
        elif tipo == 'yfinance':
            simbolo = dados_indicadores.get(nome)
            if simbolo is not None and simbolo in dados_indicadores:
                ax1.plot(
                    dados_indicadores[simbolo].index,
                    dados_indicadores[simbolo]['retorno'],
                    label=nome,
                    linestyle='--',
                    alpha=0.7
                )
    
    ax1.set_title("Evolu√ß√£o do Capital e Indicadores")
    ax1.set_ylabel("Valor (R$)")
    ax1.grid(True)
    ax1.legend()
    
    # Gr√°fico secund√°rio de rentabilidade mensal
    if mostrar_tendencias:
        ax2.plot(
            df_resultado.index,
            df_resultado['Saldo'].pct_change() * 100,
            label='Rentabilidade Mensal',
            color='#16a34a',
            linewidth=2
        )
        ax2.set_title("Rentabilidade Mensal")
        ax2.set_ylabel("Rentabilidade (%)")
        ax2.grid(True)
    
    st.pyplot(fig)
    
    # Exibindo estat√≠sticas principais
    st.markdown("### üìä Estat√≠sticas Principais")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üí∞ Capital Final",
            formatar_moeda(df_resultado['Saldo'].iloc[-1]),
            delta=formatar_moeda(df_resultado['Saldo'].iloc[-1] - df_resultado['Capital'].iloc[0])
        )
    
    with col2:
        rentabilidade_total = (df_resultado['Saldo'].iloc[-1] / df_resultado['Capital'].iloc[0] - 1) * 100
        st.metric(
            "üìà Rentabilidade Total",
            formatar_percentual(rentabilidade_total),
            delta=formatar_percentual(rentabilidade_total - 100)
        )
    
    with col3:
        volatilidade = df_resultado['Saldo'].pct_change().std() * 100
        st.metric(
            "üìä Volatilidade",
            formatar_percentual(volatilidade)
        )
    
    with col4:
        sharpe_ratio = (rentabilidade_total - 2.25) / volatilidade
        st.metric(
            "‚≠êÔ∏è √çndice de Sharpe",
            f"{sharpe_ratio:.2f}"
        )
    
    # Exibindo estat√≠sticas detalhadas
    if mostrar_estatisticas:
        st.markdown("### üìä Estat√≠sticas Detalhadas")
        
        # Criando DataFrame com estat√≠sticas
        estatisticas = {
            "M√©trica": [
                "M√©dia Mensal",
                "M√©dia Anual",
                "M√°ximo",
                "M√≠nimo",
                "Desvio Padr√£o",
                "Coeficiente de Varia√ß√£o"
            ],
            "Valor": [
                formatar_moeda(df_resultado['Saldo'].mean()),
                formatar_moeda(df_resultado['Saldo'].mean() * 12),
                formatar_moeda(df_resultado['Saldo'].max()),
                formatar_moeda(df_resultado['Saldo'].min()),
                formatar_moeda(df_resultado['Saldo'].std()),
                f"{df_resultado['Saldo'].std() / df_resultado['Saldo'].mean():.2%}"
            ]
        }
        
        df_estatisticas = pd.DataFrame(estatisticas)
        st.dataframe(df_estatisticas, use_container_width=True)
    
    # Adicionando recomenda√ß√µes
    st.markdown("### üìù Recomenda√ß√µes")
    
    # Analisando rentabilidade
    if rentabilidade_total > 100:
        st.success("‚úÖ Excelente rentabilidade! Seu investimento est√° performando muito bem.")
    elif rentabilidade_total > 50:
        st.info("‚ÑπÔ∏è Boa rentabilidade! Seu investimento est√° performando bem.")
    else:
        st.warning("‚ö†Ô∏è Rendimento abaixo do esperado. Considere revisar sua estrat√©gia de investimento.")
    
    # Analisando volatilidade
    if volatilidade < 10:
        st.success("‚úÖ Baixa volatilidade! Seu portf√≥lio √© est√°vel.")
    elif volatilidade < 20:
        st.info("‚ÑπÔ∏è Volatilidade moderada. Seu portf√≥lio tem alguns riscos.")
    else:
        st.warning("‚ö†Ô∏è Alta volatilidade! Seu portf√≥lio tem riscos significativos.")
    
    # Adicionando bot√µes de a√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ Recalcular com Novos Par√¢metros"):
            st.experimental_rerun()
    
    with col2:
        if st.button("üíæ Exportar Resultados"):
            st.success("Resultados exportados com sucesso!")
    
    # Exibindo a tabela de resultados
    st.dataframe(
        df_resultado.style.format({
            'Capital': formatar_moeda,
            'Retirada': formatar_moeda,
            'Aporte': formatar_moeda,
            'Saldo': formatar_moeda,
            'Rentabilidade': formatar_percentual
        }),
        use_container_width=True
    )

def render_dashboard(df_resultado, dados_indicadores, indicadores_selecionados):
    """Renderiza o dashboard com cards informativos e gr√°ficos interativos."""
    st.title("üìä Dashboard de An√°lise")
    
    # Cards com m√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Capital Final",
            formatar_moeda(df_resultado['Saldo'].iloc[-1]),
            delta=formatar_moeda(df_resultado['Saldo'].iloc[-1] - df_resultado['Capital'].iloc[0])
        )
    
    with col2:
        rentabilidade_total = ((df_resultado['Saldo'].iloc[-1] / df_resultado['Capital'].iloc[0]) - 1) * 100
        st.metric(
            "Rentabilidade Total",
            formatar_percentual(rentabilidade_total),
            delta=formatar_percentual(df_resultado['Rentabilidade'].mean())
        )
    
    with col3:
        volatilidade = df_resultado['Rentabilidade'].std()
        st.metric(
            "Volatilidade",
            formatar_percentual(volatilidade),
            delta=formatar_percentual(volatilidade - df_resultado['Rentabilidade'].std())
        )
    
    with col4:
        indice_sharpe = (rentabilidade_total - 0.0225) / volatilidade if volatilidade != 0 else 0
        st.metric(
            "√çndice de Sharpe",
            f"{indice_sharpe:.2f}",
            delta=f"{indice_sharpe - 1:.2f}"
        )
    
    # Gr√°fico de evolu√ß√£o do patrim√¥nio
    st.subheader("üìà Evolu√ß√£o do Patrim√¥nio")
    fig = px.line(
        df_resultado,
        x=df_resultado.index,
        y=['Saldo', 'Capital'],
        title='Evolu√ß√£o do Patrim√¥nio ao Longo do Tempo',
        labels={'value': 'Valor (R$)', 'variable': 'Tipo'},
        template='plotly_white'
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Gr√°fico de rentabilidade mensal
    st.subheader("üìä Rentabilidade Mensal")
    fig = px.bar(
        df_resultado,
        x=df_resultado.index,
        y='Rentabilidade',
        title='Rentabilidade Mensal',
        labels={'Rentabilidade': 'Rentabilidade (%)'},
        template='plotly_white'
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Compara√ß√£o com indicadores
    st.subheader("üîç Compara√ß√£o com Indicadores")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Indicadores Selecionados:**")
        for indicador in indicadores_selecionados:
            st.write(f"- {indicador[0]}")
    
    with col2:
        st.write("**Dados dos Indicadores:**")
        for nome, dados in dados_indicadores.items():
            if 'valor' in dados.columns:
                st.write(f"- {nome}: {dados['valor'].iloc[-1]:.2f}")
            elif 'retorno' in dados.columns:
                st.write(f"- {nome}: {dados['retorno'].iloc[-1]:.2f}%")
    
    # An√°lise de Risco
    st.subheader("‚ö†Ô∏è An√°lise de Risco")
    risco = "Baixo" if volatilidade < 5 else "M√©dio" if volatilidade < 10 else "Alto"
    st.info(f"""
        - **N√≠vel de Risco**: {risco}
        - **Volatilidade**: {formatar_percentual(volatilidade)}
        - **√çndice de Sharpe**: {indice_sharpe:.2f}
        - **Rentabilidade M√©dia**: {formatar_percentual(df_resultado['Rentabilidade'].mean())}
    """)
    
    # Recomenda√ß√µes
    st.subheader("üí° Recomenda√ß√µes")
    if indice_sharpe > 1:
        st.success("O investimento apresenta um bom retorno ajustado ao risco.")
    elif indice_sharpe > 0:
        st.warning("O investimento apresenta retorno positivo, mas poderia ser melhor ajustado ao risco.")
    else:
        st.error("O investimento n√£o est√° compensando adequadamente o risco assumido.")

def render_input_form() -> Dict:
    """
    Renderiza o formul√°rio de entrada.
    
    Esta fun√ß√£o renderiza o formul√°rio para entrada
    dos par√¢metros da simula√ß√£o.
    
    Returns:
        Dict: Dicion√°rio com os par√¢metros inseridos
        
    Exemplo:
        params = render_input_form()
    """
    
    try:
        # Se√ß√£o de par√¢metros b√°sicos
        st.header("üìù Par√¢metros da Simula√ß√£o")
        
        col1, col2 = st.columns(2)
        
        with col1:
            initial_capital = st.number_input(
                "Capital Inicial (R$)",
                min_value=0.0,
                value=10000.0,
                step=1000.0
            )
            
            monthly_contribution = st.number_input(
                "Aporte Mensal (R$)",
                min_value=0.0,
                value=1000.0,
                step=100.0
            )
            
            monthly_withdrawal = st.number_input(
                "Retirada Mensal (R$)",
                min_value=0.0,
                value=0.0,
                step=100.0
            )
        
        with col2:
            inflation_rate = st.number_input(
                "Taxa de Infla√ß√£o (% a.a.)",
                min_value=0.0,
                value=5.0,
                step=0.1
            ) / 100
            
            risk_free_rate = st.number_input(
                "Taxa Livre de Risco (% a.a.)",
                min_value=0.0,
                value=10.0,
                step=0.1
            ) / 100
            
            months = st.number_input(
                "Per√≠odo (meses)",
                min_value=1,
                value=12,
                step=1
            )
        
        # C√°lculo das datas
        start_date = datetime.now()
        end_date = start_date + relativedelta(months=months)
        
        # Bot√£o para calcular
        if st.button("Calcular"):
            return {
                "initial_capital": initial_capital,
                "monthly_contribution": monthly_contribution,
                "monthly_withdrawal": monthly_withdrawal,
                "inflation_rate": inflation_rate,
                "risk_free_rate": risk_free_rate,
                "start_date": start_date,
                "end_date": end_date
            }
        
        return {}
        
    except Exception as e:
        st.error(f"Erro ao renderizar formul√°rio: {str(e)}")
        return {} 